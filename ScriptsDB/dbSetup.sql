PRAGMA foreign_keys = ON;

CREATE TABLE IF NOT EXISTS user (
    userID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    userName TEXT NOT NULL,
    passwordHash BLOB NOT NULL,
    isAdmin BOOLEAN NOT NULL,
    creationTime INTEGER NOT NULL,
    lastVisit INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS topic (
    topicID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    topicName TEXT NOT NULL,
    postingUser INTEGER REFERENCES user(userID) ON DELETE SET NULL ON UPDATE CASCADE,
    creationTime INTEGER NOT NULL,
    updateTime INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS claim (
    claimID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    topic INTEGER NOT NULL REFERENCES topic(topicID) ON DELETE CASCADE ON UPDATE CASCADE,
    postingUser INTEGER REFERENCES user(userID) ON DELETE SET NULL ON UPDATE CASCADE,
    creationTime INTEGER NOT NULL,
    updateTime INTEGER NOT NULL,
    text TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS claimToClaimType (
    claimRelTypeID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    claimRelType TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS claimToClaim (
    claimRelID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    first INTEGER NOT NULL REFERENCES claim(claimID) ON DELETE CASCADE ON UPDATE CASCADE,
    second INTEGER NOT NULL REFERENCES claim(claimID) ON DELETE CASCADE ON UPDATE CASCADE,
    claimRelType INTEGER NOT NULL REFERENCES claimToClaimType(claimRelTypeID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT claimToClaimUnique UNIQUE (first, second)
);

CREATE TABLE IF NOT EXISTS replyText (
    replyTextID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    postingUser INTEGER REFERENCES user(userID) ON DELETE SET NULL ON UPDATE CASCADE,
    creationTime INTEGER NOT NULL,
    text TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS replyToClaimType (
    claimReplyTypeID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    claimReplyType TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS replyToClaim (
    replyToClaimID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    reply INTEGER NOT NULL REFERENCES replyText (replyTextID) ON DELETE CASCADE ON UPDATE CASCADE,
    claim INTEGER NOT NULL REFERENCES claim (claimID) ON DELETE CASCADE ON UPDATE CASCADE,
    replyToClaimRelType INTEGER NOT NULL REFERENCES replyToClaimType(claimReplyTypeID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS replyToReplyType (
    replyReplyTypeID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    replyReplyType TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS replyToReply (
    replyToReplyID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    reply INTEGER NOT NULL REFERENCES replyText(replyTextID) ON DELETE CASCADE ON UPDATE CASCADE,
    parent INTEGER NOT NULL REFERENCES replyText(replyTextID) ON DELETE CASCADE ON UPDATE CASCADE,
    replyToReplyRelType INTEGER NOT NULL REFERENCES replyToReplyType(replyReplyTypeID) ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO claimToClaimType VALUES (1, "Opposed");
INSERT INTO claimToClaimType VALUES (2, "Equivalent");

INSERT INTO replyToClaimType VALUES (1, "Clarification");
INSERT INTO replyToClaimType VALUES (2, "Supporting Argument");
INSERT INTO replyToClaimType VALUES (3, "Counterargument");

INSERT INTO replyToReplyType VALUES (1, "Evidence");
INSERT INTO replyToReplyType VALUES (2, "Support");
INSERT INTO replyToReplyType VALUES (3, "Rebuttal")